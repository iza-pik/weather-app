{"version":3,"sources":["components/input-field/index.jsx","components/form/index.js","components/button/index.jsx","components/current-weather/index.jsx","constants/index.js","components/weather-card/index.jsx","components/forecast-weather/index.jsx","App.js","serviceWorker.js","index.js"],"names":["InputField","props","react_default","a","createElement","className","label","htmlFor","id","checked","type","name","minLength","maxLength","placeholder","value","onChange","onBlur","onSubmit","Form","children","Button","disabled","onClick","CurrentWeather","concat","city","data","main","temp","toFixed","src","weather","icon","alt","description","API_KEY","WeatherCard","dt_txt","pressure","humidity","ForecastWeather","list","map","forecast","components_weather_card","App","state","loading","error","weatherData","units","currentWeather","forecastWeather","event","_this$setState","_this","setState","Object","defineProperty","target","onChangeCheckbox","preventDefault","currentCity","fetch","then","response","ok","json","forecastData","components_form","this","components_input_field","components_button","components_current_weather","components_forecast_weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6923fd0d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./input-field.css\";\r\n\r\nconst InputField = props => (\r\n  <div className=\"Input-field\">\r\n    {props.label && <label htmlFor={props.id}>{props.label}</label>}\r\n    <input\r\n      checked={props.checked}\r\n      type={props.type}\r\n      id={props.id}\r\n      name={props.name}\r\n      minLength=\"4\"\r\n      maxLength=\"20\"\r\n      placeholder={props.placeholder}\r\n      value={props.value}\r\n      onChange={props.onChange}\r\n      onBlur={props.onBlur}\r\n      onSubmit={props.onSubmit}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default InputField;\r\n","import React from \"react\";\r\nimport \"./form.css\";\r\n\r\nconst Form = props => (\r\n  <form onSubmit={props.onSubmit} className={props.className}>\r\n    {props.children}\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = props => (\r\n  <button\r\n    disabled={props.disabled}\r\n    type={props.type}\r\n    className={props.className}\r\n    onClick={props.onClick}\r\n  >\r\n    {props.children}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./current-weather.css\";\r\nimport { Celsius } from \"constants\";\r\n\r\nconst CurrentWeather = props => {\r\n  return (\r\n    <div className=\"current-weather\">\r\n      <ul>\r\n        <li>{`Current weather in ${props.city}:`}</li>\r\n        <li>{`${props.data.main.temp.toFixed(0)}°C`}</li>\r\n        <img\r\n          src={`http://openweathermap.org/img/w/${\r\n            props.data.weather[0].icon\r\n          }.png`}\r\n          alt={`${props.data.weather[0].description} in ${props.city}`}\r\n          className=\"weather-icon\"\r\n        />\r\n        <li>{props.data.weather[0].description}</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","export const API_KEY = \"847c4dda05c3a22fb02d777556a5510f\";\r\n// export const Celsius = \"°C\";\r\n// export const Fahrenheit = \" F\";\r\n","import React from \"react\";\r\nimport \"./weather-card.css\";\r\n\r\nconst WeatherCard = props => {\r\n  return (\r\n    <div className=\"weather-card\">\r\n      {/* <h2>{props.weather.main.}</h2> */}\r\n      <ul>\r\n        <li>{props.weather.dt_txt}</li>\r\n        <li>{`Temperature: ${props.weather.main.temp.toFixed(0)}°C`}</li>\r\n        <li>{`Pressure: ${props.weather.main.pressure.toFixed(0)} hPa`}</li>\r\n        <li>{`Humidity: ${props.weather.main.humidity.toFixed(0)}%`}</li>\r\n        <img\r\n          src={`http://openweathermap.org/img/w/${\r\n            props.weather.weather[0].icon\r\n          }.png`}\r\n          alt={`${props.weather.weather[0].description} in ${props.city}`}\r\n          className=\"weather-icon\"\r\n        />\r\n        <li>{props.weather.weather[0].description}</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport \"./forecast-weather.css\";\r\nimport WeatherCard from \"../weather-card\";\r\n\r\nconst ForecastWeather = props => {\r\n  return (\r\n    <div className=\"forecast-weather\">\r\n      <ul>\r\n        <li>{`Weather forecast for ${props.city}:`}</li>\r\n      </ul>\r\n      {props.data.list.map(forecast => (\r\n        <WeatherCard weather={forecast} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastWeather;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport InputField from \"./components/input-field\";\nimport Form from \"./components/form\";\nimport Button from \"./components/button\";\nimport CurrentWeather from \"./components/current-weather\";\nimport { API_KEY } from \"./constants\";\n// import { Celsius } from \"./constants\";\n// import { Fahrenheit } from \"./constants\";\nimport ForecastWeather from \"./components/forecast-weather\";\n\nclass App extends Component {\n  state = {\n    city: \"\",\n    loading: false,\n    error: null,\n    weatherData: null,\n    units: \"metric\",\n    currentWeather: true,\n    forecastWeather: true\n  };\n  onChange = event => {\n    // console.log(event.target);\n    this.setState({\n      [event.target.name || event.target.id]: event.target.value,\n      error: null\n    });\n  };\n  onChangeCheckbox = event => {\n    this.setState({\n      [event.target.id]: !this.state[event.target.id]\n    });\n  };\n\n  onSubmit = event => {\n    event.preventDefault();\n    this.setState({ loading: true, currentCity: this.state.city });\n    if (this.state.currentWeather)\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${\n          this.state.city\n        }&appid=${API_KEY}&units=${this.state.units}`\n      )\n        .then(response => {\n          if (!response.ok) {\n            return response\n              .json()\n              .then(json => this.setState({ error: json, loading: false }));\n          }\n          return response.json();\n        })\n        .then(json => {\n          this.setState({ weatherData: json, loading: false });\n        });\n    if (this.state.forecastWeather)\n      fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${\n          this.state.city\n        }&appid=${API_KEY}&units=${this.state.units}`\n      )\n        .then(response => {\n          if (!response.ok) {\n            return response\n              .json()\n              .then(json => this.setState({ error: json, loading: false }));\n          }\n          return response.json();\n        })\n        .then(json => {\n          this.setState({ forecastData: json, loading: false });\n        });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>What's the weather like?</h1>\n          <img\n            src=\"https://bit.ly/2UhPg06\"\n            alt=\"spinning sun\"\n            className=\"logo\"\n          />\n        </header>\n        <Form className=\"input-form\" onSubmit={this.onSubmit}>\n          <fieldset>\n            <label>City:</label>\n            <InputField\n              placeholder=\"Enter city\"\n              type=\"text\"\n              id=\"city\"\n              value={this.state.city}\n              onChange={this.onChange}\n            />\n          </fieldset>\n          <InputField\n            label=\"Current weather\"\n            id=\"currentWeather\"\n            checked={this.state.currentWeather}\n            type=\"checkbox\"\n            onChange={this.onChangeCheckbox}\n          />\n          <InputField\n            label=\"Weather forecast for the next 5 days\"\n            id=\"forecastWeather\"\n            checked={this.state.forecastWeather}\n            type=\"checkbox\"\n            onChange={this.onChangeCheckbox}\n          />\n          <InputField\n            label=\"Metric units\"\n            name=\"units\"\n            value=\"metric\"\n            id=\"metric\"\n            checked={\"metric\" === this.state.units}\n            type=\"radio\"\n            onChange={this.onChange}\n          />\n          <InputField\n            label=\"Imperial units\"\n            name=\"units\"\n            value=\"imperial\"\n            id=\"imperial\"\n            checked={\"imperial\" === this.state.units}\n            type=\"radio\"\n            onChange={this.onChange}\n          />\n          <Button\n            disabled={\n              this.state.loading ||\n              !this.state.city ||\n              (!this.state.currentWeather && !this.state.forecastWeather)\n            }\n            type=\"submit\"\n            className=\"submit-button\"\n          >\n            {this.state.loading ? \"Loading...\" : \"Submit\"}\n          </Button>\n        </Form>\n        {this.state.error && <p>Oops! Something's wrong!</p>}\n        {this.state.weatherData && (\n          <CurrentWeather\n            city={this.state.currentCity}\n            data={this.state.weatherData}\n          />\n        )}\n        {this.state.forecastData && (\n          <ForecastWeather\n            city={this.state.currentCity}\n            data={this.state.forecastData}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}